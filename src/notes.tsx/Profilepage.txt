import React, { useEffect, useState } from 'react';
import { getAuth, User } from 'firebase/auth';
import { doc, getFirestore, getDoc, updateDoc, DocumentReference } from 'firebase/firestore';
import {
  Box,
  Button,
  FormControl,
  FormLabel,
  Heading,
  Input,
  Text,
  Flex,
  Image,
  Avatar,
} from '@chakra-ui/react';
import { BiEditAlt } from 'react-icons/bi';
import LayoutOne from '../../layout/LayoutOne';

const ProfilePage = () => {
  const auth = getAuth();
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [userData, setUserData] = useState<any>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editedUserData, setEditedUserData] = useState<any>({});

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        if (auth.currentUser) {
          setCurrentUser(auth.currentUser);

          const firestore = getFirestore();
          const docRef = doc(firestore, 'users', auth.currentUser.uid);
          const docSnap = await getDoc(docRef);

          if (docSnap.exists()) {
            setUserData(docSnap.data());
            setEditedUserData(docSnap.data());
          }
        }
      } catch (error: any) {
        console.error('Error fetching user data:', error.message);
      }
    };

    fetchUserData();
  }, [auth.currentUser]);

  const handleEditToggle = () => {
    setIsEditing(!isEditing);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEditedUserData({
      ...editedUserData,
      [e.target.name]: e.target.value
    });
  };

  const handleSaveChanges = async () => {
    try {
      if (auth.currentUser) {
        const docRef = doc(getFirestore(), 'users', auth.currentUser.uid);
        await updateDoc(docRef as DocumentReference<any>, editedUserData);
        setIsEditing(false);
        setUserData(editedUserData); // Update userData with edited data
        console.log('User data updated successfully');
      }
    } catch (error: any) {
      console.error('Error updating user data:', error.message);
    }
  };

  return (
  <LayoutOne>
      <Box p="4">
      {currentUser && userData && (
        <Box>
          <Flex alignItems="center" mb="4">
            <Avatar src="https://via.placeholder.com/150" mr="4" />
            <Heading as="h2" size="lg">Profile</Heading>
          </Flex>
          <Text fontSize="md" fontWeight="bold">Name: {userData.name}</Text>
          <Text fontSize="md">Email: {userData.email}</Text>
          <Text fontSize="md">User Type: {userData.userType}</Text>
          <Text fontSize="md">User House Address: {userData.houseAddress}</Text>
          <Text fontSize="md">User Phone Number: {userData.phoneNumber}</Text>
          {userData.businessType && (
            <Text fontSize="md">User Business Type: {userData.businessType}</Text>
          )}
          {userData.businessName && (
            <Text fontSize="md">User Business Name: {userData.businessName}</Text>
          )}
          {isEditing ? (
            <Box mt="4">
              <FormControl mb="2">
                <FormLabel>Name</FormLabel>
                <Input
                  type="text"
                  name="name"
                  value={editedUserData.name || ''}
                  onChange={handleInputChange}
                />
              </FormControl>
              <FormControl mb="2">
                <FormLabel>Business Name</FormLabel>
                <Input
                  type="text"
                  name="businessName"
                  value={editedUserData.businessName || ''}
                  onChange={handleInputChange}
                />
              </FormControl>
              <FormControl mb="2">
                <FormLabel>Business Type</FormLabel>
                <Input
                  type="text"
                  name="businessType"
                  value={editedUserData.businessType || ''}
                  onChange={handleInputChange}
                />
              </FormControl>
              <FormControl mb="2">
                <FormLabel>Phone Number</FormLabel>
                <Input
                  type="text"
                  name="phoneNumber"
                  value={editedUserData.phoneNumber || ''}
                  onChange={handleInputChange}
                />
              </FormControl>
              <FormControl mb="2">
                <FormLabel>House Address</FormLabel>
                <Input
                  type="text"
                  name="houseAddress"
                  value={editedUserData.houseAddress || ''}
                  onChange={handleInputChange}
                />
              </FormControl>
              <Button onClick={handleSaveChanges} mr="2">Save Changes</Button>
              <Button onClick={handleEditToggle}>Cancel</Button>
            </Box>
          ) : (
            <Button mt="4" leftIcon={<BiEditAlt />} onClick={handleEditToggle}>Edit Profile</Button>
          )}
        </Box>
      )}
    </Box>

  </LayoutOne>
  );
};

export default ProfilePage;
